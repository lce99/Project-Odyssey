# =============================================================================
# 006 - Ï∂îÍ∞Ä Ïù∏Îç±Ïä§ Î∞è Ï†úÏïΩÏ°∞Í±¥ ÏµúÏ†ÅÌôî
# =============================================================================

"""Additional indexes and constraints optimization

Revision ID: 006_indexes_constraints
Revises: 005_monitoring_tables
Create Date: 2024-01-01 00:05:00.000000

"""
from alembic import op
import sqlalchemy as sa

revision = '006_indexes_constraints'
down_revision = '005_monitoring_tables'
branch_labels = None
depends_on = None

def upgrade() -> None:
    """Ï∂îÍ∞Ä Ïù∏Îç±Ïä§ Î∞è Ï†úÏïΩÏ°∞Í±¥ ÏµúÏ†ÅÌôî"""
    
    print("üéØ Í≥†Í∏â Ïù∏Îç±Ïä§ Î∞è Ï†úÏïΩÏ°∞Í±¥ ÏÉùÏÑ± Ï§ë...")
    
    # =================================================================
    # 1. Î≥µÌï© Ïù∏Îç±Ïä§ (ÏÑ±Îä• ÌÅ¨Î¶¨Ìã∞Ïª¨)
    # =================================================================
    
    # ÌéòÏñ¥Î≥Ñ ÏµúÏã† ÏπºÎßå ÏÉÅÌÉú Ï°∞Ìöå ÏµúÏ†ÅÌôî (Í∞ÄÏû• ÎπàÎ≤àÌïú ÏøºÎ¶¨)
    op.execute("""
        CREATE INDEX CONCURRENTLY idx_kalman_latest_by_pair
        ON analysis.kalman_states (pair_id, time DESC)
        INCLUDE (z_score, hedge_ratio, spread);
    """)
    
    # Ïã†Ìò∏ Ïã§Ìñâ ÎåÄÍ∏∞ Î™©Î°ù ÏµúÏ†ÅÌôî
    op.execute("""
        CREATE INDEX CONCURRENTLY idx_signals_pending_execution
        ON analysis.signals (time DESC, signal_strength DESC)
        WHERE is_valid = TRUE AND is_executed = FALSE AND expires_at > NOW();
    """)
    
    # Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨Ïö© Ìè¨ÏßÄÏÖò Î™®ÎãàÌÑ∞ÎßÅ
    op.execute("""
        CREATE INDEX CONCURRENTLY idx_positions_risk_monitoring
        ON trading.positions (last_updated DESC, current_z_score, stop_loss_z_score)
        WHERE status = 'OPEN' AND current_z_score IS NOT NULL;
    """)
    
    # =================================================================
    # 2. Î∂ÄÎ∂Ñ Ïù∏Îç±Ïä§ (Ï†ÄÏû•Í≥µÍ∞Ñ ÏµúÏ†ÅÌôî)
    # =================================================================
    
    # ÏµúÍ∑º 30Ïùº Í±∞ÎûòÎßå Ïù∏Îç±Ïã±
    op.execute("""
        CREATE INDEX CONCURRENTLY idx_trades_recent_performance
        ON trading.trades (pair_id, execution_time DESC, net_pnl_usd DESC)
        WHERE execution_time >= NOW() - INTERVAL '30 days' AND trade_type = 'CLOSE';
    """)
    
    # ÎÜíÏùÄ Z-scoreÎßå Ïù∏Îç±Ïã± (Ïã†Ìò∏ ÏÉùÏÑ±Ïö©)
    op.execute("""
        CREATE INDEX CONCURRENTLY idx_kalman_high_z_scores
        ON analysis.kalman_states (time DESC, pair_id, abs(z_score) DESC)
        WHERE abs(z_score) >= 2.0;
    """)
    
    # =================================================================
    # 3. Ìï®Ïàò Í∏∞Î∞ò Ïù∏Îç±Ïä§
    # =================================================================
    
    # Ï†àÎåÄÍ∞í Z-score Ïù∏Îç±Ïä§ (Ïã†Ìò∏ Í∞ïÎèÑ Ïàú)
    op.execute("""
        CREATE INDEX CONCURRENTLY idx_kalman_abs_z_score
        ON analysis.kalman_states (time DESC, (abs(z_score)) DESC);
    """)
    
    # Ìè¨ÏßÄÏÖò Î≥¥Ïú† Í∏∞Í∞Ñ Í≥ÑÏÇ∞ Ïù∏Îç±Ïä§
    op.execute("""
        CREATE INDEX CONCURRENTLY idx_positions_holding_period
        ON trading.positions (
            (EXTRACT(DAYS FROM NOW() - entry_time))::INTEGER DESC
        ) WHERE status = 'OPEN';
    """)
    
    # =================================================================
    # 4. Í≥†Í∏â Ï†úÏïΩÏ°∞Í±¥
    # =================================================================
    
    # ÌéòÏñ¥Î≥Ñ ÎèôÏãú Î≥¥Ïú† Ìè¨ÏßÄÏÖò Ïàò Ï†úÌïú (ÏµúÎåÄ 1Í∞ú)
    op.execute("""
        CREATE UNIQUE INDEX CONCURRENTLY idx_one_position_per_pair
        ON trading.positions (pair_id)
        WHERE status = 'OPEN';
    """)
    
    # ÏùºÏùº Í±∞Îûò ÌöüÏàò Ï†úÌïúÏùÑ ÏúÑÌïú Ï§ÄÎπÑ (Î∑∞ÏóêÏÑú ÌôúÏö©)
    op.execute("""
        CREATE INDEX CONCURRENTLY idx_trades_daily_count
        ON trading.trades (DATE(execution_time), pair_id);
    """)
    
    print("‚úÖ Í≥†Í∏â Ïù∏Îç±Ïä§ Î∞è Ï†úÏïΩÏ°∞Í±¥ ÏÉùÏÑ± ÏôÑÎ£å")

def downgrade() -> None:
    """Ïù∏Îç±Ïä§ Ï†úÍ±∞"""
    indexes_to_drop = [
        'idx_kalman_latest_by_pair',
        'idx_signals_pending_execution', 
        'idx_positions_risk_monitoring',
        'idx_trades_recent_performance',
        'idx_kalman_high_z_scores',
        'idx_kalman_abs_z_score',
        'idx_positions_holding_period',
        'idx_one_position_per_pair',
        'idx_trades_daily_count'
    ]
    
    for idx in indexes_to_drop:
        op.execute(f"DROP INDEX CONCURRENTLY IF EXISTS {idx};")
