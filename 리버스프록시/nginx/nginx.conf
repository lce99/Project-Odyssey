# nginx/nginx.conf - Project Odysseus 리버스 프록시 설정

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# 성능 최적화
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # 기본 설정
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 로그 형식
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # 성능 최적화
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;
    
    # 보안 헤더
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=dashboard:10m rate=5r/s;
    
    # Upstream 서버 정의
    upstream trading_bot {
        least_conn;
        server trading-bot:8000 max_fails=3 fail_timeout=30s;
        # 추후 로드 밸런싱용
        # server trading-bot-2:8000 max_fails=3 fail_timeout=30s;
    }
    
    upstream grafana_backend {
        server grafana:3000 max_fails=3 fail_timeout=30s;
    }
    
    upstream jupyter_backend {
        server jupyter:8888 max_fails=3 fail_timeout=30s;
    }
    
    upstream prometheus_backend {
        server prometheus:9090 max_fails=3 fail_timeout=30s;
    }
    
    upstream adminer_backend {
        server adminer:8080 max_fails=3 fail_timeout=30s;
    }
    
    # ==========================================================================
    # 메인 대시보드 (기본 도메인)
    # ==========================================================================
    server {
        listen 80;
        server_name odysseus.local localhost;
        
        # 보안 설정
        server_tokens off;
        
        # 메인 트레이딩 대시보드
        location / {
            limit_req zone=dashboard burst=20 nodelay;
            
            proxy_pass http://trading_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 지원
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 타임아웃 설정
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # API 엔드포인트
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://trading_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API 전용 설정
            proxy_buffering off;
            proxy_request_buffering off;
        }
        
        # 헬스체크 엔드포인트
        location /health {
            access_log off;
            proxy_pass http://trading_bot/health;
        }
        
        # 정적 파일 서빙 (로그, 리포트 등)
        location /static/ {
            alias /var/www/static/;
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # ==========================================================================
    # Grafana 대시보드
    # ==========================================================================
    server {
        listen 80;
        server_name grafana.odysseus.local;
        
        location / {
            proxy_pass http://grafana_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Grafana WebSocket 지원
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
    
    # ==========================================================================
    # Jupyter Lab
    # ==========================================================================
    server {
        listen 80;
        server_name jupyter.odysseus.local;
        
        location / {
            proxy_pass http://jupyter_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Jupyter WebSocket 지원 (중요!)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Jupyter 특화 설정
            proxy_read_timeout 86400;  # 24시간 (긴 실행 작업용)
            proxy_send_timeout 86400;
            proxy_connect_timeout 60;
        }
        
        # Jupyter API
        location ~* /(api|terminals)/ {
            proxy_pass http://jupyter_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
    
    # ==========================================================================
    # Prometheus 모니터링
    # ==========================================================================
    server {
        listen 80;
        server_name prometheus.odysseus.local;
        
        # 기본 인증 (선택적)
        # auth_basic "Prometheus Access";
        # auth_basic_user_file /etc/nginx/.htpasswd;
        
        location / {
            proxy_pass http://prometheus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # ==========================================================================
    # 데이터베이스 관리 (Adminer)
    # ==========================================================================
    server {
        listen 80;
        server_name adminer.odysseus.local db.odysseus.local;
        
        # 데이터베이스 접근은 보안상 제한적으로
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker 네트워크
        deny all;
        
        location / {
            proxy_pass http://adminer_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # ==========================================================================
    # Redis 관리 (Redis Commander)
    # ==========================================================================
    server {
        listen 80;
        server_name redis.odysseus.local;
        
        # Redis 접근도 제한적으로
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker 네트워크
        deny all;
        
        location / {
            proxy_pass http://redis-commander:8081;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # ==========================================================================
    # 개발 도구들 (개발 환경에서만)
    # ==========================================================================
    server {
        listen 80;
        server_name dev.odysseus.local;
        
        # 개발 환경 접근 제한
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # 개발용 대시보드
        location / {
            proxy_pass http://dev-environment:8001;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 지원
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # 디버거 포트
        location /debug/ {
            proxy_pass http://dev-environment:5678/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
    
    # MailHog (이메일 테스트)
    server {
        listen 80;
        server_name mailhog.odysseus.local;
        
        location / {
            proxy_pass http://mailhog:8025;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
    
    # ==========================================================================
    # SSL/HTTPS 설정 (프로덕션용)
    # ==========================================================================
    
    # HTTPS 리다이렉트
    server {
        listen 80;
        server_name odysseus.example.com;  # 실제 도메인으로 변경
        return 301 https://$host$request_uri;
    }
    
    # HTTPS 서버 (Let's Encrypt 인증서 사용)
    server {
        listen 443 ssl http2;
        server_name odysseus.example.com;
        
        # SSL 인증서 설정
        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        
        # SSL 보안 설정
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # 보안 헤더 강화
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;
        
        location / {
            limit_req zone=dashboard burst=20 nodelay;
            
            proxy_pass http://trading_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 지원
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
    
    # ==========================================================================
    # 상태 모니터링 및 헬스체크
    # ==========================================================================
    
    # Nginx 자체 상태 페이지
    server {
        listen 80;
        server_name status.odysseus.local;
        
        location / {
            return 200 "Nginx is running\n";
            add_header Content-Type text/plain;
        }
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;
            deny all;
        }
    }
    
    # ==========================================================================
    # 에러 페이지 커스터마이징
    # ==========================================================================
    
    # 커스텀 에러 페이지
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # ==========================================================================
    # 로드 밸런싱 및 고가용성 (향후 확장용)
    # ==========================================================================
    
    # 헬스체크용 upstream
    upstream backend_health {
        server trading-bot:8000;
        # health_check interval=10s fails=3 passes=2;  # Nginx Plus 전용
    }
    
    # 백업 서버 설정 (재해 복구용)
    upstream trading_bot_backup {
        server trading-bot:8000;
        # server trading-bot-backup:8000 backup;  # 백업 서버
    }
}

# ==========================================================================
# Stream 블록 (TCP/UDP 프록시 - 필요시)
# ==========================================================================
stream {
    # PostgreSQL 연결 프록시 (개발용)
    upstream postgres_backend {
        server timescaledb:5432;
    }
    
    server {
        listen 5432;
        proxy_pass postgres_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        
        # 접근 제한
        allow 127.0.0.1;
        allow 172.20.0.0/16;
        deny all;
    }
    
    # Redis 연결 프록시 (개발용)
    upstream redis_backend {
        server redis:6379;
    }
    
    server {
        listen 6379;
        proxy_pass redis_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        
        # 접근 제한
        allow 127.0.0.1;
        allow 172.20.0.0/16;
        deny all;
    }
}